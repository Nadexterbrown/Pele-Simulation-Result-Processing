[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pele-processing"
version = "1.0.0"
description = "Parallel processing system for Pele combustion simulation analysis"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Pele Processing Team", email = "support@pele-processing.org"}
]
maintainers = [
    {name = "Pele Processing Team", email = "support@pele-processing.org"}
]
keywords = ["combustion", "simulation", "parallel", "analysis", "flame", "shock", "AMReX"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
]
requires-python = ">=3.8"

dependencies = [
    "numpy>=1.20.0",
    "scipy>=1.7.0",
    "matplotlib>=3.5.0",
    "pandas>=1.3.0",
    "pyyaml>=6.0",
    "pathlib2>=2.3.0; python_version<'3.4'",
]

[project.optional-dependencies]
# Core scientific dependencies
full = [
    "yt>=4.0.0",
    "h5py>=3.0.0",
    "netcdf4>=1.5.0",
]

# Parallel processing
parallel = [
    "mpi4py>=3.0.0",
]

# Thermodynamic calculations
thermo = [
    "cantera>=2.6.0",
]

# Advanced visualization
viz = [
    "pillow>=8.0.0",
    "imageio>=2.9.0",
    "ffmpeg-python>=0.2.0",
]

# Development dependencies
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-mpi>=0.6",
    "black>=21.0.0",
    "isort>=5.9.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.13.0",
    "sphinx>=4.0.0",
    "sphinx-rtd-theme>=0.5.0",
]

# All optional dependencies
all = [
    "pele-processing[full,parallel,thermo,viz]"
]

[project.urls]
Homepage = "https://github.com/pele-combustion/pele-processing"
Documentation = "https://pele-processing.readthedocs.io"
Repository = "https://github.com/pele-combustion/pele-processing.git"
"Bug Tracker" = "https://github.com/pele-combustion/pele-processing/issues"

[project.scripts]
pele-process = "pele_processing.cli:main"
pele-analyze = "pele_processing.cli:analyze_command"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["pele_processing*", "base_processing*", "additional_processing*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"pele_processing" = ["*.yaml", "*.toml", "*.json"]
"pele_processing.config" = ["*.yaml", "*.toml"]
"pele_processing.utils" = ["*.yaml"]
"additional_processing" = ["*.yaml", "*.toml", "*.json"]

# Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow",
    "mpi: marks tests requiring MPI",
    "gpu: marks tests requiring GPU",
    "integration: marks integration tests",
]

# Code formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "yt.*",
    "mpi4py.*",
    "cantera.*",
    "PIL.*",
    "imageio.*",
    "ffmpeg.*",
]
ignore_missing_imports = true

# Coverage
[tool.coverage.run]
source = ["src/pele_processing"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstract",
]